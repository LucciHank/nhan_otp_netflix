// C√¥ng c·ª• ki·ªÉm tra k·∫øt n·ªëi database
// Ch·∫°y: node check-database.js
require('dotenv').config();
const { sequelize } = require('./models');

async function checkDatabase() {
  console.log('ƒêang ki·ªÉm tra k·∫øt n·ªëi database...');
  try {
    // Th·ª≠ k·∫øt n·ªëi
    await sequelize.authenticate();
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng! Database ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.');
    
    // Ki·ªÉm tra lo·∫°i database
    const dialect = sequelize.getDialect();
    console.log(`üìä Lo·∫°i database ƒëang s·ª≠ d·ª•ng: ${dialect.toUpperCase()}`);
    
    // Ki·ªÉm tra c√°c b·∫£ng
    const [tables] = await sequelize.query(
      dialect === 'postgres' 
        ? "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"
        : "SELECT name FROM sqlite_master WHERE type='table'"
    );
    
    console.log(`üìã Danh s√°ch b·∫£ng trong database:`);
    tables.forEach((table, index) => {
      const tableName = dialect === 'postgres' ? table.table_name : table.name;
      if (!tableName.startsWith('sqlite_') && tableName !== 'SequelizeMeta') {
        console.log(`   ${index + 1}. ${tableName}`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå K·∫øt n·ªëi th·∫•t b·∫°i!', error.message);
    console.error('Chi ti·∫øt l·ªói:', error);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüìå G·ª£i √Ω: Database server kh√¥ng ph·∫£n h·ªìi ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi.');
      console.log('   ‚Ä¢ Ki·ªÉm tra th√¥ng tin k·∫øt n·ªëi trong file .env');
      console.log('   ‚Ä¢ Ki·ªÉm tra xem database server c√≥ ƒëang ch·∫°y kh√¥ng');
      console.log('   ‚Ä¢ Ki·ªÉm tra c·∫•u h√¨nh firewall');
    } else if (error.message.includes('password authentication failed')) {
      console.log('\nüìå G·ª£i √Ω: X√°c th·ª±c database th·∫•t b·∫°i.');
      console.log('   ‚Ä¢ Ki·ªÉm tra username v√† password trong chu·ªói k·∫øt n·ªëi');
    }
  } finally {
    process.exit(0);
  }
}

checkDatabase(); 